#+TITLE: Ruby On Rails - Models, ActiveRecords, & ActiveRelations
#+DATE: \today
#+OPTIONS: texht:t
#+OPTIONS: toc:nil email:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER_EXTRA:
#+LaTeX_HEADER: \usepackage[a4paper, total={6in, 10in}]{geometry}
#+LaTeX_HEADER: \usepackage[utf8]{inputenc}
#+LaTeX_HEADER: \usepackage[english]{babel}

#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usemintedstyle{emacs}

#+LaTeX_HEADER: \renewcommand{\familydefault}{\rmdefault}
#+LaTeX_HEADER: \usepackage[usenames, dvipsnames]{color}
#+LaTeX_HEADER: \pagenumbering{arabic}
#+LaTeX_HEADER: \usepackage{hyperref}
#+LaTeX_HEADER: \hypersetup{colorlinks=true, linkcolor=blue, filecolor=magenta, urlcolor=cyan}
#+LaTeX_HEADER: \urlstyle{same}

** Theory
   - /active record/: Design patterm for relational databases.
   - /ActiveRecord/: Rails implementation of active record pattern.
   - Retrive and manipulate data as objects, not as static rows.
   - /Active Relations/: ORMs

** Basic commands
   - New app
     #+BEGIN_SRC sh
       rails new <app> [-d [mysql]]
     #+END_SRC

   - New controller
     #+BEGIN_SRC sh
       rails generate controller <controller_name> <view> <view> ..
     #+END_SRC
   - New model
     #+BEGIN_SRC sh
       rails generate model <model-name-in-camelcase>
     #+END_SRC

   - Dump database schema
     #+BEGIN_SRC sh
       rake db:schema:dump
     #+END_SRC

   - Rake -- ruby make
     - List all tasks
       #+BEGIN_SRC sh
         rake -T
       #+END_SRC

     - List task related to db
       #+BEGIN_SRC sh
         rake -T db
       #+END_SRC

     - dump dev/prod database schema
       #+BEGIN_SRC sh
         rake db:schema:dump RAILS_ENV=production
         rake db:schema:dump RAILS_ENV=development
       #+END_SRC

     - Migrations
       #+BEGIN_SRC sh
         rails generate migration <migrations-name>
       #+END_SRC

     - create table
       #+BEGIN_SRC sh
         rails generate model <name>
       #+END_SRC

     - run migration(default will be on development)
       #+BEGIN_SRC sh
         rake db:migrate
       #+END_SRC

     - drop migration(to VERSION=0, before any migrations were ran)
       #+BEGIN_SRC sh
         rake db:migrate VERSION=0
       #+END_SRC

     - Migration status
       #+BEGIN_SRC sh
         $ rake db:migrate:status

         database: /home/psachin/course/ror-yt/simple_cms/db/development.sqlite3

          Status   Migration ID    Migration Name
         --------------------------------------------------
           down    20160622121918  Do nothing yet
           down    20160622122201  Create users
       #+END_SRC

     - run migrations with versions
       #+BEGIN_SRC sh -n
         $ rake db:migrate VERSION=20160622121918
         == 20160622121918 DoNothingYet: migrating =====================================
         == 20160622121918 DoNothingYet: migrated (0.0000s) ============================

         $ rake db:migrate VERSION=20160622122201
         == 20160622122201 CreateUsers: migrating ======================================
         -- create_table(:users)
         -> 0.0009s
         == 20160622122201 CreateUsers: migrated (0.0009s) =============================

         $ rake db:migrate:down VERSION=20160622121918
         == 20160622121918 DoNothingYet: reverting =====================================
         == 20160622121918 DoNothingYet: reverted (0.0000s) ============================

         $ rake db:migrate:status
         database: /home/psachin/course/ror-yt/simple_cms/db/development.sqlite3

          Status   Migration ID    Migration Name
         --------------------------------------------------
           down    20160622121918  Do nothing yet
            up     20160622122201  Create users
       #+END_SRC

** Active Records
   - Rails console
     #+BEGIN_SRC ruby -n
       subject = Subject.new
       # Check if the record exist in db or not(new record)
       subject.new_record?             # true

       # Create new record
       eng = Subject.new(:name => "Eng", :position => 1, :visible => true)
       eng.save
       eng.new_record?             # false

       # Create new inst, add values, and save
       math = Subject.create(:name => "Math", :position => 2)

       # find by id
       find_math = Subject.find(1)
       find_math.name = "English"
       find_math.save

       # Update multiple atts
       find_math.updated_attribute(:name => "Maths", :visible => true)

       # Delete a record
       find_math.destroy

       visible_subjects = s = Subject.where(:visible =>  true)
       visible_subjects.class          # type
       visible_subjects.to_sql         # SQL query

       Subject.where(:visible =>  true).where(:position => 1)
       Subject.where(:visible =>  true, :position => 1).first.name

       # ASCending order
       Subject.where(:visible =>  true).order("position ASC")

       # DESCending order, limited to one entry
       Subject.where(:visible =>  true).order("position DESC").limit(1).offset(1)
     #+END_SRC

   - Named scopes
     #+BEGIN_SRC ruby -n
       class Subject < ActiveRecord::Base

         # Similar to model manager in Dango
         scope :visible, lambda { where(:visible => true)}
         scope :invisible, lambda { where(:visible => false)}

         scope :sorted, lambda { order("subjects.position ASC")}
         scope :newest_first, lambda { order("subjects.created_at DESC")}

         scope :search, lambda {|query|
           where(["name LIKE ?", "%#{query}%"])
         }
       end
     #+END_SRC

     - Queries
       #+BEGIN_SRC ruby -n
         Subject.visible
         Subject.newest_first
         Subject.search("Math")
       #+END_SRC

** Links
   - [[https://www.youtube.com/watch?v%3D-Jdc_WMQ8Ts][Youtube]]
